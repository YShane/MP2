
	// Aufgabe 1
	public int sollTeile(int Stunde) {
		// Bitte ergaenzen!
		int ans = 0;
		
		if(Stunde > 24 || Stunde <0){
			
			System.out.println("Falsche Eingabewert!!");
		}
		else{
			
			if(Stunde >=5 && Stunde <12 ){
				
				ans = 150;
				
			}
			else if(Stunde >=12 && Stunde <21){
				
				ans = 200;
			}
			else{
				ans = 120;
			}
		}

		return ans;
	}

	// Aufgabe 2
	public double[] mittlereStdProduktionSchicht(int[][] stundenproduktion, int tag) {
		// Bitte ergaenzen!
		//The use of a single outer "For" loop is equally possible. Not used here due to the possibility of 3 "for" loops.
		//Getting the first value(Frühschicht Sollwerte)
		double prod1 = 0;
		int counter1 = 0;
		for (int i=tag; i<tag+1;i++){
			for(int x = 5; x< 12;x++){
				prod1 = prod1 + stundenproduktion[i][x];
				counter1++;
			}
			
		}
		
		double ans1 = prod1/counter1;
		
		
		//Getting the second value(Mittagsschicht)
		int counter2 = 0;
		double prod2 = 0;
		for (int i=tag; i<tag+1;i++){
			for(int x = 12; x< 21;x++){
				prod2 = prod2 + stundenproduktion[i][x];
				counter2++;
			}
			
		}
		double ans2 = prod2/counter2;
		
		//Spätschicht divided into 2 because of the hours that carry over to the next day
	int	counter3a = 0, counter3b = 0;
	
		double prod3a = 0;
		double prod3b= 0;
		for (int i=tag; i<tag+1;i++){
			for(int x = 21; x< 24;x++){
				prod3a = prod3a + stundenproduktion[i][x];
				counter3a++;
			}
				
			
			
			for(int y = 0; y<5; y++){
				prod3b = prod3b + stundenproduktion[i][y];
				
				counter3b++;
			}
			
		}
		
		double prod3 = prod3a + prod3b;
		
		double ans3 = prod3/(counter3a + counter3b);
		
		
		double[] ergebnis = {ans1, ans2, ans3};



		return ergebnis;
		// return new double[3];

	}

	// Aufgabe 3
	public int[] tagesproduktion(int[][] stundenproduktion) {
		// Bitte ergaenzen!

		int tag = 0;
		
		int tagProd0 = 0;
		int tagProd1 = 0;
		int tagProd2 = 0;
		int tagProd3 = 0;
		int tagProd4 = 0;
		int tagProd5 = 0;
		int tagProd6 = 0;
		int tagProd7 = 0;
		int tagProd8 = 0;
		int tagProd9 = 0;
		for(int i = tag;i<stundenproduktion.length; i++){
			for(int x = 0;x<stundenproduktion[0].length;x++){
				
				if(i == 0){
					tagProd0 = tagProd0 + stundenproduktion[i][x];	
				}
				
				
				if(i ==1){
					tagProd1 = tagProd1 + stundenproduktion[i][x];	
				}
				
				if(i==2){
					tagProd2 = tagProd2 + stundenproduktion[i][x];	
				}
				
				if(i==3){
					
					tagProd3 = tagProd3 + stundenproduktion[i][x];	
				}
				
				if(i==4){
					tagProd4 = tagProd4 + stundenproduktion[i][x];	
				}
				
				if(i==5){
					tagProd5 = tagProd5 + stundenproduktion[i][x];	
				}
				
				if(i==6){
					tagProd6 = tagProd6 + stundenproduktion[i][x];	
				}
				
				if(i==7){
					tagProd7 = tagProd7 + stundenproduktion[i][x];	
					
				}
				
				if(i==8){
					tagProd8 = tagProd8 + stundenproduktion[i][x];	
					
				}
				
				if(i==9){
					tagProd9 = tagProd9 + stundenproduktion[i][x];	
				}
			}	
			
			
			
		}
		
		
		int [] ans = {tagProd0, tagProd1, tagProd2,tagProd3,tagProd4,tagProd5,tagProd6,tagProd7,tagProd8,tagProd9};
		
		

		 return ans;

	}

	// Aufgabe 4
	public int[] istSollVergleich(int[][] stundenproduktion) {
		// Bitte ergaenzen!

		int [] istWerte = new int [10]; 
		
		istWerte = this.tagesproduktion(stundenproduktion);
		
		int [] sollWerte = {3810,3810,3810,3810,3810,3810,3810,3810,3810,3810};
		
		
		
		int pos0 = 0;
		int pos1 = 0;
		int pos2 = 0;
		int pos3 = 0;
		int pos4 = 0;
		int pos5 = 0;
		int pos6 = 0;
		int pos7 = 0;
		int pos8 = 0;
		int pos9 = 0;
		
		for(int i = 0; i< 10; i++){
			
			if(i==0){
				pos0 = sollWerte[i] - istWerte[i];
			}
			
			if(i==1){
				pos1 = sollWerte[i] - istWerte[i];
			}
			
			if(i==2){
				pos2 = sollWerte[i] - istWerte[i];
			}
			
			if(i==3){
				pos3 = sollWerte[i] - istWerte[i];
				
			}
			
			if(i==4){
				
				pos4 = sollWerte[i] - istWerte[i];
			}
			
			if(i==5){
				pos5 = sollWerte[i] - istWerte[i];
				
			}
			
			if(i==6){
				
				pos6 = sollWerte[i] - istWerte[i];
			}
			
			if(i==7){
				
				pos7 = sollWerte[i] - istWerte[i];
			}
			
			if(i==8){
				
				pos8 = sollWerte[i] - istWerte[i];
			}
			
			if(i==9){
				
				pos9 = sollWerte[i] - istWerte[i];
			}
		}
	
		

	int	[] ans = {pos0, pos1, pos2, pos3,pos4,pos5,pos6,pos7,pos8,pos9};
	
	return ans;
	}

	// Aufgabe 5
	public int minMittlereStdProd(int[][] stundenproduktion, int tag) {
		// Bitte ergaenzen!
	/*	Possible to write a full method but preferred to use the result array from the other method.
		int prod1 = 0;
		int prod2 = 0;
		int prod3a = 0;
		int prod3b = 0;
		
		//Use of a single outer loop is also possible. Not used here due to the possibility of 3 "for" loops.
		int counter1 = 0;
		for(int i = tag; i<tag+1; i++){
			for(int x = 5; x< 12;x++){
				
			prod1 = prod1 + stundenproduktion[i][x];
			counter1++;
			}
			
		}
		int counter2 = 0;
		for(int i = tag; i<tag+1; i++){
			for(int x = 12; x< 21;x++){
				
				prod2 =  prod2 + stundenproduktion[i][x];
				counter2++;
			}
			
		}
		int counter3a = 0;
		int counter3b = 0;
		for (int i=tag; i<tag+1;i++){
			for(int x = 21; x< 24;x++){
				prod3a = prod3a + stundenproduktion[i][x];
				counter3a++;
			}
				
			
			
			for(int y = 0; y<5; y++){
				prod3b = prod3b + stundenproduktion[i][y];
				counter3b++;
			}
			
		}*/
		
		double [] mschicht = this.mittlereStdProduktionSchicht(stundenproduktion, tag);
		//System.out.println(Arrays.toString(mschicht));  //testing received array
		
		//Didn't use a hash Table because it hasn't been handled in class yet
		boolean duplicates = false; //value that checks if any number appears more than once
		
		
		for(int j = 0; j< mschicht.length; j++){
			for(int k = j+1; k<mschicht.length;k++){
				if(k!=j && mschicht[k] == mschicht[j]){
					duplicates = true;
				}
			}
		}
		
		double least = mschicht[0]; // attributing first value
		double least1 = least;
		
		
		int pos = 0;
		if(duplicates == false)  //Nearly lost it here because the compiler doesn't point out "duplicates = false" as an error. Remember, to compare boolean, use ==
			{
			for(int val = 1; val< mschicht.length; val++){
				if(mschicht[val] < least){
					least = mschicht[val];
					pos = val;
				}
				
			}
			
		}	
		else{
			if(mschicht[0] == least){
				pos = 0;
			}
			else if(mschicht[0]!= least){
				
				if(mschicht[1]==least){
					pos = 1;
				}
				else{
					pos = 2;
				}
				
			}
			
			
		}

	 return pos;
	}

	// Aufgabe 6
	public int maxMittlereStdProd(int[][] stundenproduktion, int tag) {

		// Bitte ergaenzen!

		
		double [] mschicht = this.mittlereStdProduktionSchicht(stundenproduktion, tag);
		//System.out.println(Arrays.toString(mschicht));  //testing received array
		
		//Didn't use a hash Table because it hasn't been handled in class yet
		boolean duplicates = false; //value that checks if any number appears more than once
		
		
		for(int j = 0; j< mschicht.length; j++){
			for(int k = j+1; k<mschicht.length;k++){
				if(k!=j && mschicht[k] == mschicht[j]){
					duplicates = true;
				}
			}
		}
		
		double most = mschicht[0]; // attributing first value
		double most1 = most;
		
		
		int pos = 0;
		if(duplicates == false)  //Nearly lost it here because the compiler doesn't point out "duplicates = false" as an error. Remember, to compare boolean, use ==
			{
			for(int val = 1; val< mschicht.length; val++){
				if(mschicht[val] > most){
					most = mschicht[val];
					pos = val;
				}
				
			}
			
		}	
		else{
			if(mschicht[2] == most){
				pos = 2;
			}
			else if(mschicht[2]!= most){
				
				if(mschicht[1]==most){
					pos = 1;
				}
				else{
					pos = 0;
				}
				
			}
			
			
		}

	 return pos;

		 
	}
